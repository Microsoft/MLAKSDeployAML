# MLAKSDeploy Pipeline

trigger:
  batch: true
  branches:
    include:
    - master
    - staging
    
variables:
- group: AzureKeyVault


jobs:
- job: MLAKSDeployAMLJob
  timeoutInMinutes: 300
  cancelTimeoutInMinutes: 2
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - bash: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      which conda
      conda env create -f {{cookiecutter.project_name}}/environment.yml
      conda env list
      conda activate MLAKSDeployAML
      conda env list
      echo Login Azure Account
      az login -t $(sptenent) --service-principal -u $(spidentity) --password $(spsecret)
      cd {{cookiecutter.project_name}}
      echo Execute 00_AMLConfiguration.ipynb
      papermill 00_AMLConfiguration.ipynb 00_AMLConfiguration_Output.ipynb \
        --log-output \
        --no-progress-bar \
        -k python3 \
        -p subscription_id $(azuresubscription) \
        -p resource_group $(azureresourcegroup) \
        -p workspace_name $(workspacename) \
        -p workspace_region $(azureregion) \
        -p image_name $(aksimagename)
    displayName: '00_AML_Configuration.ipynb'

  - template: steps/papermill.yml
    parameters:
      notebook: 01_DataPrep.ipynb
      location: "{{cookiecutter.project_name}}"

  - bash: |
      mkdir -p {{cookiecutter.project_name}}/iotedge/data_folder
      mkdir -p {{cookiecutter.project_name}}/aks/data_folder
      cd {{cookiecutter.project_name}}
      cp data_folder/*.tsv iotedge/data_folder
      cp data_folder/*.tsv aks/data_folder
    displayName: 'Copying data'

  - template: steps/papermill.yml
    parameters:
      notebook: 02_TrainOnLocal.ipynb
      location: "{{cookiecutter.project_name}}"

  - template: steps/papermill.yml
    parameters:
      notebook: 03_DevelopScoringScript.ipynb
      location: "{{cookiecutter.project_name}}"

  - template: steps/papermill.yml
    parameters:
      notebook: 04_CreateImage.ipynb
      location: "{{cookiecutter.project_name}}"

  - bash: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate MLAKSDeployAML
      echo Execute 05_DeployOnAKS.ipynb
      export PYTHONPATH=$(pwd)/{{cookiecutter.project_name}}:${PYTHONPATH}
      cd {{cookiecutter.project_name}}/aks
      papermill 05_DeployOnAKS.ipynb test.ipynb \
          --log-output \
          --no-progress-bar \
          -k python3 \
          -p aks_name $(aksname) \
          -p aks_location $(azureregion) \
          -p aks_service_name $(aksvcname)
    displayName: '05_DeployOnAKS.ipynb'

  - template: steps/papermill.yml
    parameters:
      notebook: 06_SpeedTestWebApp.ipynb
      location: "{{cookiecutter.project_name}}/aks"

  - template: steps/papermill.yml
    parameters:
      notebook: 07_RealTimeScoring.ipynb
      location: "{{cookiecutter.project_name}}/aks"

#  - bash: |
#      source /usr/share/miniconda/etc/profile.d/conda.sh
#      conda activate MLAKSDeployAML
#      export PYTHONPATH=$(pwd)/{{cookiecutter.project_name}}:${PYTHONPATH}
#      cd {{cookiecutter.project_name}}/iotedge
#      echo Execute 05_DeployOnIOTedge.ipynb
#      papermill 05_DeployOnIOTedge.ipynb test.ipynb \
#          --log-output \
#          --no-progress-bar \
#          -k python3 \
#          -p iot_hub_name fstlstnameiothub \
#          -p device_id mydevice \
#          -p module_name mymodule
#    displayName: '05_DeployOnIOTedge.ipynb'

  - template: steps/papermill.yml
    parameters:
      notebook: 08_TearDown.ipynb
      location: "{{cookiecutter.project_name}}/aks"

#  - template: steps/papermill.yml
#    parameters:
#      notebook: 06_TearDown.ipynb
#      location: "{{cookiecutter.project_name}}/iotedge"

  - bash: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate MLAKSDeployAML
      echo Execute Resource Group Delete
      existResponse=$(az group exists -n $(azureresourcegroup))
      if [ "$existResponse" == "true" ]; then
        echo Deleting project resource group
        az group delete --name $(azureresourcegroup) --yes
      else
        echo Project resource group did not exist
      fi
      echo Done Cleanup
    displayName: 'Backup Cleanup'
    condition: or(canceled(),failed())

  - task: CreateWorkItem@1
    inputs:
      workItemType: 'Issue'
      title: $(System.TeamProject) - Build $(Build.BuildNumber) Failed
      assignedTo: 'Fidan <fboylu@microsoft.com>'
      associate: true
      teamProject: $(System.TeamProject)

      fieldMappings: |
        Description=Branch: Branch $(Build.SourceBranch) failed to build. Go to Boards>WorkItems and tag the failure type.
    displayName: 'Create work item on failure'
    condition: failed()


